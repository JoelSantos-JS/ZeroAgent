const BaseHandler = require('./base-handler');
const ResponseFormatter = require('../formatters/response-formatter');
const TransactionValidator = require('../validators/transaction-validator');
const logger = require('../../utils/logger');

// Importar servi√ßos especializados
const ProductSearchService = require('../sales/product-search-service');
const SalesProcessingService = require('../sales/sales-processing-service');
const StockManagementService = require('../sales/stock-management-service');
const SalesAnalyticsService = require('../sales/sales-analytics-service');

/**
 * Handler modular para processamento de vendas
 * Orquestra servi√ßos especializados para manter c√≥digo limpo e escal√°vel
 */
class SalesHandlerV2 extends BaseHandler {
  constructor(databaseService, userService) {
    super(databaseService, userService);
    
    // Inicializar servi√ßos especializados
    this.productSearch = new ProductSearchService(databaseService);
    this.salesProcessing = new SalesProcessingService(databaseService);
    this.stockManagement = new StockManagementService(databaseService);
    this.salesAnalytics = new SalesAnalyticsService(databaseService);
    
    // Configura√ß√µes de sincroniza√ß√£o
    this.syncInterval = 30000; // 30 segundos
    this.lastSyncTimes = new Map(); // Por usu√°rio
    this.isRunning = false;
    
    // M√©tricas de performance
    this.metrics = {
      totalSalesProcessed: 0,
      totalRevenue: 0,
      lastSyncTime: null,
      errors: 0
    };
  }

  /**
   * Inicializar handler
   */
  async initialize() {
    try {
      logger.info('üöÄ Inicializando SalesHandlerV2 (Modular)...');
      
      // Sincroniza√ß√£o autom√°tica desabilitada temporariamente
      logger.info('‚ö†Ô∏è Sincroniza√ß√£o autom√°tica desabilitada (modo manual)');
      
      logger.info('‚úÖ SalesHandlerV2 inicializado com sucesso!');
      
    } catch (error) {
      logger.error('‚ùå Erro ao inicializar SalesHandlerV2:', error);
      throw error;
    }
  }

  /**
   * Processar comando principal
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise do Gemini
   * @returns {Promise<string>} - Resposta formatada
   */
  async process(userId, analysisResult) {
    try {
      const { descricao, intencao } = analysisResult;
      
      // Verificar se √© resposta a sugest√£o de produto (n√∫mero)
      if (this.isProductSuggestionResponse(descricao)) {
        return await this.handleProductSuggestionResponse(userId, descricao);
      }
      
      // Verificar se √© comando de cria√ß√£o de produto
      if (this.isCreateProductCommand(descricao)) {
        return await this.handleCreateProductCommand(userId, descricao, analysisResult);
      }
      
      // Verificar se √© comando de sincroniza√ß√£o
      if (this.isSyncCommand(descricao, intencao)) {
        return await this.handleSyncCommand(userId);
      }
      
      // Verificar se √© registro de venda manual
      if (this.isSaleRegistration(descricao, intencao)) {
        return await this.handleSaleRegistration(userId, analysisResult);
      }
      
      // Verificar se √© consulta de estoque
      if (this.isStockQuery(descricao, intencao)) {
        return await this.handleStockQuery(userId, analysisResult);
      }
      
      // Verificar se √© consulta detalhada de produto
      if (this.isProductQuery(descricao, intencao)) {
        return await this.handleProductQuery(userId, analysisResult);
      }
      
      // Verificar se √© consulta de vendas
      if (this.isSalesQuery(descricao, intencao)) {
        return await this.handleSalesQuery(userId, analysisResult);
      }
      
      return null; // N√£o √© comando relacionado a vendas
      
    } catch (error) {
      logger.error('‚ùå Erro no SalesHandlerV2:', error);
      return '‚ùå Erro ao processar comando de vendas. Tente novamente.';
    }
  }

  // =====================================
  // M√âTODOS DE DETEC√á√ÉO DE COMANDOS
  // =====================================

  /**
   * Verificar se √© resposta num√©rica a sugest√£o de produto
   */
  isProductSuggestionResponse(descricao) {
    const text = descricao?.toLowerCase().trim() || '';
    return /^[1-3]$/.test(text);
  }
  
  /**
   * Verificar se √© comando de cria√ß√£o de produto
   */
  isCreateProductCommand(descricao) {
    const text = descricao?.toLowerCase() || '';
    return text.includes('criar') && (text.includes('produto') || text.match(/criar\s+\w+/));
  }

  /**
   * Verificar se √© comando de sincroniza√ß√£o
   */
  isSyncCommand(descricao, intencao) {
    const syncKeywords = ['sincronizar', 'sync', 'atualizar vendas', 'buscar vendas'];
    const text = descricao?.toLowerCase() || '';
    return syncKeywords.some(keyword => text.includes(keyword)) ||
           ['sincronizar_vendas', 'sync_vendas'].includes(intencao);
  }

  /**
   * Verificar se √© registro de venda
   */
  isSaleRegistration(descricao, intencao) {
    const saleKeywords = ['vendi', 'venda', 'vendeu', 'cliente comprou'];
    const text = descricao?.toLowerCase() || '';
    return saleKeywords.some(keyword => text.includes(keyword)) ||
           ['registrar_venda', 'nova_venda'].includes(intencao);
  }

  /**
   * Verificar se √© consulta de estoque
   */
  isStockQuery(descricao, intencao) {
    const stockKeywords = ['estoque', 'quantidade', 'dispon√≠vel', 'tem em estoque'];
    const text = descricao?.toLowerCase() || '';
    return stockKeywords.some(keyword => text.includes(keyword)) ||
           ['consultar_estoque', 'verificar_estoque'].includes(intencao);
  }

  /**
   * Verificar se √© consulta detalhada de produto
   */
  isProductQuery(descricao, intencao) {
    const productKeywords = ['pre√ßo', 'valor', 'detalhes', 'informa√ß√µes', 'dados do produto'];
    const text = descricao?.toLowerCase() || '';
    return productKeywords.some(keyword => text.includes(keyword)) ||
           ['consultar_produto', 'info_produto'].includes(intencao);
  }

  /**
   * Verificar se √© consulta de vendas
   */
  isSalesQuery(descricao, intencao) {
    const salesKeywords = ['vendas', 'faturamento', 'relat√≥rio', 'performance'];
    const text = descricao?.toLowerCase() || '';
    return salesKeywords.some(keyword => text.includes(keyword)) ||
           ['consultar_vendas', 'relatorio_vendas'].includes(intencao);
  }

  // =====================================
  // HANDLERS DE COMANDOS
  // =====================================

  /**
   * Processar registro manual de venda
   */
  async handleSaleRegistration(userId, analysisResult) {
    try {
      const { valor, descricao, produto_nome } = analysisResult;
      
      // Extrair nome do produto da descri√ß√£o
      const productName = produto_nome || this.productSearch.extractProductName(descricao);
      
      if (!productName) {
        return `‚ùå **Produto n√£o identificado**\n\n` +
               `üí° *Exemplo: "Vendi fone por 60 reais"*\n` +
               `üí° *Ou: "Cliente comprou projetor por 50"*`;
      }
      
      // Buscar produto no banco de dados
      const products = await this.databaseService.getUserProducts(userId, 100);
      let product = await this.productSearch.findProductIntelligent(products, productName);
      
      // Se n√£o encontrou produto, oferecer sugest√µes
      if (!product) {
        const suggestions = this.productSearch.findProductSuggestions(products, productName);
        
        if (suggestions.length > 0) {
          const suggestionsList = suggestions.map((s, index) => 
            `${index + 1}. ${s.name} (${s.confidence}% similar)`
          ).join('\n');
          
          return `ü§î **Produto "${productName}" n√£o encontrado**\n\n` +
                 `üí° **Voc√™ quis dizer:**\n${suggestionsList}\n\n` +
                 `üìù **Op√ß√µes:**\n` +
                 `‚Ä¢ Responda com o n√∫mero da sugest√£o\n` +
                 `‚Ä¢ Digite "criar ${productName}" para criar novo produto\n` +
                 `‚Ä¢ Use o nome exato de um produto existente`;
        }
        
        const availableProducts = products.slice(0, 5).map(p => 
          `‚Ä¢ ${p.name || p.product_name}`
        ).join('\n');
        
        return `‚ùå **Produto "${productName}" n√£o encontrado**\n\n` +
               `üì¶ **Produtos dispon√≠veis:**\n${availableProducts}\n\n` +
               `üí° *Digite "criar ${productName}" para criar novo produto*`;
      }
      
      // Se o usu√°rio n√£o especificou valor, pedir confirma√ß√£o
      if (!valor || valor <= 0) {
        return this.salesProcessing.requestPriceConfirmation(userId, product, descricao);
      }
      
      // Extrair nome do comprador
      const buyerName = this.salesProcessing.extractBuyerName(descricao);
      
      // Processar venda
      const saleResult = await this.salesProcessing.processSale(
        userId, product, valor, descricao, buyerName
      );
      
      // Atualizar m√©tricas
      this.metrics.totalSalesProcessed++;
      this.metrics.totalRevenue += valor;
      
      return this.salesProcessing.formatSaleResponse(saleResult);
      
    } catch (error) {
      logger.error('‚ùå Erro ao processar venda:', error);
      return '‚ùå Erro ao processar venda. Tente novamente.';
    }
  }

  /**
   * Processar consulta de estoque
   */
  async handleStockQuery(userId, analysisResult) {
    try {
      const { descricao, produto_nome } = analysisResult;
      
      // Se n√£o especificou produto, mostrar resumo geral
      const productName = produto_nome || this.productSearch.extractProductName(descricao);
      
      if (!productName) {
        return await this.stockManagement.getGeneralStockSummary(userId);
      }
      
      return await this.stockManagement.getProductStock(userId, productName);
      
    } catch (error) {
      logger.error('‚ùå Erro ao consultar estoque:', error);
      return '‚ùå Erro ao consultar estoque. Tente novamente.';
    }
  }

  /**
   * Processar consulta detalhada de produto
   */
  async handleProductQuery(userId, analysisResult) {
    try {
      const { descricao, produto_nome } = analysisResult;
      
      const productName = produto_nome || this.productSearch.extractProductName(descricao);
      
      if (!productName) {
        return `‚ùå **Produto n√£o especificado**\n\n` +
               `üí° *Exemplo: "Qual o pre√ßo do fone?"*`;
      }
      
      const products = await this.databaseService.getUserProducts(userId, 100);
      const product = await this.productSearch.findProductIntelligent(products, productName);
      
      if (!product) {
        return `‚ùå **Produto n√£o encontrado: ${productName}**\n\n` +
               `üí° *Produtos dispon√≠veis:*\n` +
               products.slice(0, 5).map(p => `‚Ä¢ ${p.name || p.product_name}`).join('\n');
      }
      
      return await this.stockManagement.getProductDetails(userId, product);
      
    } catch (error) {
      logger.error('‚ùå Erro ao consultar produto:', error);
      return '‚ùå Erro ao consultar informa√ß√µes do produto.';
    }
  }

  /**
   * Processar consulta de vendas
   */
  async handleSalesQuery(userId, analysisResult) {
    try {
      const salesData = await this.salesAnalytics.getSalesAnalytics(userId);
      return this.salesAnalytics.formatSalesReport(salesData);
      
    } catch (error) {
      logger.error('‚ùå Erro ao gerar relat√≥rio de vendas:', error);
      return '‚ùå Erro ao gerar relat√≥rio de vendas.';
    }
  }

  /**
   * Processar comando de sincroniza√ß√£o
   */
  async handleSyncCommand(userId) {
    try {
      const startTime = Date.now();
      const duration = Date.now() - startTime;
      
      return `‚úÖ **Sincroniza√ß√£o conclu√≠da!**\n\n` +
             `‚è±Ô∏è **Tempo:** ${duration}ms\n` +
             `üìä **Status:** Vendas atualizadas\n\n` +
             `üí° *As vendas s√£o sincronizadas automaticamente.*`;
             
    } catch (error) {
      return '‚ùå Erro na sincroniza√ß√£o. Tente novamente.';
    }
  }

  /**
   * Processar resposta a sugest√£o de produto
   */
  async handleProductSuggestionResponse(userId, descricao) {
    // TODO: Implementar sistema de cache de sugest√µes por usu√°rio
    return `üí° **Sistema de sugest√µes ativo!**\n\n` +
           `Para usar as sugest√µes, primeiro fa√ßa uma venda que n√£o encontre o produto.\n` +
           `Exemplo: "Vendi kz por 85 reais"`;
  }

  /**
   * Processar comando de cria√ß√£o de produto
   */
  async handleCreateProductCommand(userId, descricao, analysisResult) {
    try {
      const productName = this.productSearch.extractProductNameFromCreateCommand(descricao);
      
      if (!productName) {
        return `‚ùå **Nome do produto n√£o identificado**\n\n` +
               `üí° *Exemplo: "criar produto fone bluetooth"*`;
      }
      
      const createdProduct = await this.productSearch.createProduct(userId, productName);
      
      return `‚úÖ **Produto "${productName}" criado com sucesso!**\n\n` +
             `üì¶ **Pr√≥ximos passos:**\n` +
             `‚Ä¢ Defina o pre√ßo de venda\n` +
             `‚Ä¢ Adicione categoria espec√≠fica\n` +
             `‚Ä¢ Configure custo de compra\n\n` +
             `üí° *Agora voc√™ pode registrar vendas deste produto!*`;
             
    } catch (error) {
      if (error.message.includes('j√° existe')) {
        return `‚ö†Ô∏è **${error.message}**\n\nüí° *Use o nome exato para registrar vendas.*`;
      }
      
      logger.error('‚ùå Erro ao criar produto:', error);
      return '‚ùå Erro ao criar produto. Tente novamente.';
    }
  }

  // =====================================
  // M√âTODOS DE UTILIDADE
  // =====================================

  /**
   * Obter m√©tricas do handler
   */
  getMetrics() {
    return {
      ...this.metrics,
      isRunning: this.isRunning,
      activeUsers: this.lastSyncTimes.size
    };
  }

  /**
   * Obter status do handler
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      metrics: this.getMetrics(),
      services: {
        productSearch: 'active',
        salesProcessing: 'active',
        stockManagement: 'active',
        salesAnalytics: 'active'
      }
    };
  }
}

module.exports = SalesHandlerV2;