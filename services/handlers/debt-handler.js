const BaseHandler = require('./base-handler');
const DataParser = require('../parsers/data-parser');
const ResponseFormatter = require('../formatters/response-formatter');
const moment = require('moment');

/**
 * Handler espec√≠fico para processamento de d√≠vidas
 * Processa comandos relacionados a registro, consulta e pagamento de d√≠vidas
 */
class DebtHandler extends BaseHandler {
  constructor(databaseService, userService, debtModel) {
    super(databaseService, userService);
    this.debtModel = debtModel;
  }

  /**
   * Processar comando de d√≠vida
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise do Gemini
   * @returns {Promise<string>} - Resposta formatada
   */
  async process(userId, analysisResult) {
    try {
      const { intencao, tipo } = analysisResult;
      
      switch (intencao?.toLowerCase()) {
        case 'registrar_divida':
        case 'nova_divida':
        case 'criar_divida':
          return await this.registerDebt(userId, analysisResult);
          
        case 'listar_dividas':
        case 'minhas_dividas':
        case 'ver_dividas':
          return await this.listDebts(userId, analysisResult);
          
        case 'pagar_divida':
        case 'pagamento_divida':
          return await this.payDebt(userId, analysisResult);
          
        case 'status_dividas':
        case 'resumo_dividas':
          return await this.getDebtStatus(userId);
          
        case 'dividas_atrasadas':
        case 'dividas_vencidas':
          return await this.getOverdueDebts(userId);
          
        case 'proximos_vencimentos':
        case 'dividas_vencendo':
          return await this.getUpcomingDebts(userId);
          
        case 'deletar_divida':
        case 'remover_divida':
          return await this.deleteDebt(userId, analysisResult);
          
        default:
          return this.getHelpMessage();
      }
    } catch (error) {
      return this.handleError(error, userId, analysisResult, 'd√≠vida');
    }
  }

  /**
   * Registrar nova d√≠vida
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Dados da d√≠vida
   * @returns {Promise<string>} - Resposta formatada
   */
  async registerDebt(userId, analysisResult) {
    try {
      const validation = this.validateDebtInput(analysisResult);
      if (!validation.isValid) {
        return ResponseFormatter.formatValidationMessage(validation.errors);
      }

      // Mapear campos do Gemini para o formato esperado
      const creditorName = analysisResult.credor || this.extractCreditorFromDescription(analysisResult.descricao || analysisResult.texto_original);
      const description = analysisResult.descricao || `D√≠vida registrada`;
      const originalAmount = analysisResult.valor;
      const category = this.mapCategoryFromGemini(analysisResult.categoria);
      const dueDate = analysisResult.data_vencimento;
      const priority = analysisResult.prioridade || 'medium';
      const interestRate = analysisResult.juros;
      const installmentsTotal = analysisResult.parcelas_total;
      const installmentAmount = analysisResult.valor_parcela;
      const notes = analysisResult.observacoes;

      // Processar data de vencimento - se n√£o informada, usar 30 dias a partir de hoje
      let parsedDueDate = null;
      if (dueDate) {
        parsedDueDate = DataParser.parseDate(dueDate);
        if (parsedDueDate < new Date()) {
          // Se a data j√° passou, assumir que √© para o pr√≥ximo m√™s/ano
          const nextMonth = new Date();
          nextMonth.setMonth(nextMonth.getMonth() + 1);
          parsedDueDate = nextMonth;
        }
      } else {
        // Data padr√£o: 30 dias a partir de hoje
        parsedDueDate = new Date();
        parsedDueDate.setDate(parsedDueDate.getDate() + 30);
      }

      const debtData = {
        creditorName: creditorName,
        description: description || `D√≠vida com ${creditorName}`,
        originalAmount: parseFloat(originalAmount),
        interestRate: interestRate ? parseFloat(interestRate) : null,
        dueDate: parsedDueDate,
        category: category,
        priority: priority,
        installmentsTotal: installmentsTotal ? parseInt(installmentsTotal) : null,
        installmentAmount: installmentAmount ? parseFloat(installmentAmount) : null,
        notes: notes
      };

      const debt = await this.debtModel.createDebt(userId, debtData);

      console.log('üí≥ D√≠vida registrada:', debt);
      this.logDebtAction('D√≠vida registrada', userId, debt);

      return this.formatDebtRegisteredMessage(debt);
    } catch (error) {
      console.error('‚ùå Erro ao registrar d√≠vida:', error);
      return '‚ùå Erro ao registrar d√≠vida. Tente novamente.';
    }
  }

  /**
   * Listar d√≠vidas do usu√°rio
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Filtros opcionais
   * @returns {Promise<string>} - Lista formatada de d√≠vidas
   */
  async listDebts(userId, analysisResult) {
    try {
      const { status = 'pending', categoria } = analysisResult;
      
      let debts;
      if (categoria) {
        debts = await this.debtModel.getDebtsByCategory(userId, categoria, status);
      } else {
        debts = await this.debtModel.getUserDebts(userId, status);
      }

      if (!debts || debts.length === 0) {
        return this.getNoDebtsMessage(status, categoria);
      }

      return this.formatDebtsList(debts, status);
    } catch (error) {
      console.error('‚ùå Erro ao listar d√≠vidas:', error);
      return '‚ùå Erro ao buscar suas d√≠vidas. Tente novamente.';
    }
  }

  /**
   * Processar pagamento de d√≠vida
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Dados do pagamento
   * @returns {Promise<string>} - Resultado do pagamento
   */
  async payDebt(userId, analysisResult) {
    try {
      const { divida_id: debtId, credor, valor, forma_pagamento: paymentMethod, observacoes: notes } = analysisResult;
      
      let debt;
      if (debtId) {
        debt = await this.debtModel.getDebtById(debtId, userId);
      } else if (credor) {
        // Buscar por nome do credor
        const debts = await this.debtModel.getUserDebts(userId, 'pending');
        debt = debts.find(d => d.creditor_name.toLowerCase().includes(credor.toLowerCase()));
      }

      if (!debt) {
        return '‚ùå D√≠vida n√£o encontrada. Use "minhas d√≠vidas" para ver todas as suas d√≠vidas.';
      }

      if (debt.status === 'paid') {
        return '‚úÖ Esta d√≠vida j√° foi quitada!';
      }

      const amount = parseFloat(valor);
      if (isNaN(amount) || amount <= 0) {
        return '‚ùå Valor do pagamento deve ser um n√∫mero positivo.';
      }

      if (amount > parseFloat(debt.current_amount)) {
        return `‚ö†Ô∏è Valor do pagamento (R$ ${amount.toFixed(2)}) √© maior que o saldo da d√≠vida (R$ ${parseFloat(debt.current_amount).toFixed(2)}). Confirme o valor.`;
      }

      const paymentData = {
        userId: userId,
        amount: amount,
        paymentMethod: paymentMethod || 'other',
        notes: notes
      };

      const payment = await this.debtModel.addPayment(debt.id, paymentData);
      const updatedDebt = await this.debtModel.getDebtById(debt.id, userId);

      console.log('üí∞ Pagamento de d√≠vida registrado:', payment);
      this.logDebtAction('Pagamento registrado', userId, updatedDebt);

      return this.formatPaymentMessage(updatedDebt, payment);
    } catch (error) {
      console.error('‚ùå Erro ao processar pagamento:', error);
      return '‚ùå Erro ao processar pagamento. Tente novamente.';
    }
  }

  /**
   * Obter status geral das d√≠vidas
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Status formatado
   */
  async getDebtStatus(userId) {
    try {
      const stats = await this.debtModel.getUserDebtStats(userId);
      return this.formatDebtStatsMessage(stats);
    } catch (error) {
      console.error('‚ùå Erro ao buscar status das d√≠vidas:', error);
      return '‚ùå Erro ao buscar status das d√≠vidas. Tente novamente.';
    }
  }

  /**
   * Obter d√≠vidas em atraso
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - D√≠vidas em atraso formatadas
   */
  async getOverdueDebts(userId) {
    try {
      const overdueDebts = await this.debtModel.getOverdueDebts(userId);
      
      if (!overdueDebts || overdueDebts.length === 0) {
        return '‚úÖ Parab√©ns! Voc√™ n√£o tem d√≠vidas em atraso.';
      }

      return this.formatOverdueDebtsMessage(overdueDebts);
    } catch (error) {
      console.error('‚ùå Erro ao buscar d√≠vidas em atraso:', error);
      return '‚ùå Erro ao buscar d√≠vidas em atraso. Tente novamente.';
    }
  }

  /**
   * Obter pr√≥ximos vencimentos
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Pr√≥ximos vencimentos formatados
   */
  async getUpcomingDebts(userId) {
    try {
      const upcomingDebts = await this.debtModel.getUpcomingDebts(userId, 7);
      
      if (!upcomingDebts || upcomingDebts.length === 0) {
        return 'üìÖ Voc√™ n√£o tem d√≠vidas vencendo nos pr√≥ximos 7 dias.';
      }

      return this.formatUpcomingDebtsMessage(upcomingDebts);
    } catch (error) {
      console.error('‚ùå Erro ao buscar pr√≥ximos vencimentos:', error);
      return '‚ùå Erro ao buscar pr√≥ximos vencimentos. Tente novamente.';
    }
  }

  /**
   * Deletar uma d√≠vida
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Dados da d√≠vida a deletar
   * @returns {Promise<string>} - Resultado da opera√ß√£o
   */
  async deleteDebt(userId, analysisResult) {
    try {
      const { divida_id: debtId, credor, confirmar = false } = analysisResult;
      
      let debt;
      if (debtId) {
        debt = await this.debtModel.getDebtById(debtId, userId);
      } else if (credor) {
        const debts = await this.debtModel.getUserDebts(userId);
        debt = debts.find(d => d.creditor_name.toLowerCase().includes(credor.toLowerCase()));
      }

      if (!debt) {
        return '‚ùå D√≠vida n√£o encontrada. Use "minhas d√≠vidas" para ver todas as suas d√≠vidas.';
      }

      if (!confirmar) {
        return `‚ö†Ô∏è Tem certeza que deseja deletar a d√≠vida "${debt.creditor_name}" de R$ ${parseFloat(debt.current_amount).toFixed(2)}?\n\nPara confirmar, envie: "deletar d√≠vida ${debt.creditor_name} confirmar"`;
      }

      await this.debtModel.deleteDebt(debt.id, userId);

      console.log('üóëÔ∏è D√≠vida deletada:', debt);
      this.logDebtAction('D√≠vida deletada', userId, debt);

      return `‚úÖ D√≠vida "${debt.creditor_name}" foi deletada com sucesso.`;
    } catch (error) {
      console.error('‚ùå Erro ao deletar d√≠vida:', error);
      return '‚ùå Erro ao deletar d√≠vida. Tente novamente.';
    }
  }

  /**
   * Validar dados de entrada para registro de d√≠vida
   * @param {Object} analysisResult - Dados a serem validados
   * @returns {Object} - Resultado da valida√ß√£o
   */
  validateDebtInput(analysisResult) {
    const errors = [];
    const { valor } = analysisResult;
    
    // Validar apenas valor - credor ser√° extra√≠do automaticamente
    if (!valor || parseFloat(valor) <= 0) {
      errors.push('Valor da d√≠vida deve ser maior que zero');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Formatar mensagem de d√≠vida registrada
   * @param {Object} debt - D√≠vida criada
   * @returns {string} - Mensagem formatada
   */
  formatDebtRegisteredMessage(debt) {
    const dueDateText = debt.due_date ? 
      `\nüìÖ **Vencimento:** ${moment(debt.due_date).format('DD/MM/YYYY')}` : '';
    
    const installmentsText = debt.installments_total ? 
      `\nüìä **Parcelas:** ${debt.installments_paid}/${debt.installments_total}` : '';
    
    const priorityEmoji = this.getPriorityEmoji(debt.priority);
    
    return `‚úÖ **D√≠vida registrada com sucesso!**\n\n` +
           `üí≥ **${debt.creditor_name}**\n` +
           `üí∞ **Valor:** R$ ${parseFloat(debt.current_amount).toFixed(2)}\n` +
           `üìÇ **Categoria:** ${debt.category}\n` +
           `${priorityEmoji} **Prioridade:** ${debt.priority}${dueDateText}${installmentsText}\n\n` +
           `üí° *Use "pagar d√≠vida ${debt.creditor_name} R$ [valor]" para registrar pagamentos.*`;
  }

  /**
   * Formatar lista de d√≠vidas
   * @param {Array} debts - Lista de d√≠vidas
   * @param {string} status - Status filtrado
   * @returns {string} - Lista formatada
   */
  formatDebtsList(debts, status) {
    const statusEmoji = {
      'pending': 'üí≥',
      'paid': '‚úÖ',
      'overdue': 'üö®',
      'negotiating': 'ü§ù'
    };
    
    let message = `${statusEmoji[status] || 'üìã'} **Suas d√≠vidas:**\n\n`;
    
    debts.forEach((debt, index) => {
      const isOverdue = new Date(debt.due_date) < new Date() && debt.status === 'pending';
      const overdueText = isOverdue ? ' ‚ö†Ô∏è ATRASADA' : '';
      const daysUntilDue = debt.due_date ? 
        Math.ceil((new Date(debt.due_date) - new Date()) / (1000 * 60 * 60 * 24)) : null;
      
      const dueDateText = debt.due_date ? 
        (daysUntilDue !== null ? 
          (daysUntilDue > 0 ? `\nüìÖ Vence em ${daysUntilDue} dias` : overdueText) :
          `\nüìÖ ${moment(debt.due_date).format('DD/MM/YYYY')}`) : '';
      
      const priorityEmoji = this.getPriorityEmoji(debt.priority);
      
      message += `${index + 1}. ${priorityEmoji} **${debt.creditor_name}**\n` +
                 `üí∞ R$ ${parseFloat(debt.current_amount).toFixed(2)}\n` +
                 `üìÇ ${debt.category}${dueDateText}\n\n`;
    });
    
    message += `üí° *Para pagar uma d√≠vida, use: "pagar d√≠vida [credor] R$ [valor]"*`;
    
    return message;
  }

  /**
   * Formatar mensagem de pagamento
   * @param {Object} debt - D√≠vida atualizada
   * @param {Object} payment - Pagamento realizado
   * @returns {string} - Mensagem formatada
   */
  formatPaymentMessage(debt, payment) {
    const remainingAmount = parseFloat(debt.current_amount);
    const paidAmount = parseFloat(payment.amount);
    const originalAmount = parseFloat(debt.original_amount);
    const paidPercentage = ((originalAmount - remainingAmount) / originalAmount) * 100;
    
    let message = `‚úÖ **Pagamento registrado!**\n\n` +
                  `üí≥ **${debt.creditor_name}**\n` +
                  `üí∞ **Pago:** R$ ${paidAmount.toFixed(2)}\n`;
    
    if (remainingAmount <= 0) {
      message += `üéâ **D√çVIDA QUITADA!** üéâ\n\n` +
                 `Parab√©ns! Voc√™ quitou completamente a d√≠vida com ${debt.creditor_name}! üèÜ`;
    } else {
      message += `üî¥ **Restante:** R$ ${remainingAmount.toFixed(2)}\n` +
                 `üìä **Progresso:** ${paidPercentage.toFixed(1)}% quitado\n\n` +
                 `üí™ Continue assim! Faltam R$ ${remainingAmount.toFixed(2)} para quitar.`;
    }
    
    return message;
  }

  /**
   * Formatar estat√≠sticas das d√≠vidas
   * @param {Object} stats - Estat√≠sticas
   * @returns {string} - Estat√≠sticas formatadas
   */
  formatDebtStatsMessage(stats) {
    let message = `üìä **Resumo das suas d√≠vidas:**\n\n` +
                  `üìà **Total:** ${stats.total} d√≠vidas\n` +
                  `üí≥ **Ativas:** ${stats.active}\n` +
                  `‚úÖ **Quitadas:** ${stats.paid}\n` +
                  `üö® **Em atraso:** ${stats.overdue}\n` +
                  `‚è∞ **Vencendo em 7 dias:** ${stats.upcomingSoon}\n\n` +
                  `üí∞ **Valor total:** R$ ${stats.totalAmount.toFixed(2)}\n`;
    
    if (stats.overdueAmount > 0) {
      message += `üö® **Valor em atraso:** R$ ${stats.overdueAmount.toFixed(2)}\n\n`;
    }
    
    if (Object.keys(stats.byCategory).length > 0) {
      message += `üìÇ **Por categoria:**\n`;
      Object.entries(stats.byCategory).forEach(([category, data]) => {
        message += `‚Ä¢ ${category}: ${data.count} d√≠vidas - R$ ${data.amount.toFixed(2)}\n`;
      });
    }
    
    return message;
  }

  /**
   * Formatar d√≠vidas em atraso
   * @param {Array} overdueDebts - D√≠vidas em atraso
   * @returns {string} - Mensagem formatada
   */
  formatOverdueDebtsMessage(overdueDebts) {
    let message = `üö® **D√≠vidas em atraso:**\n\n`;
    
    overdueDebts.forEach((debt, index) => {
      const daysOverdue = Math.ceil((new Date() - new Date(debt.due_date)) / (1000 * 60 * 60 * 24));
      const priorityEmoji = this.getPriorityEmoji(debt.priority);
      
      message += `${index + 1}. ${priorityEmoji} **${debt.creditor_name}**\n` +
                 `üí∞ R$ ${parseFloat(debt.current_amount).toFixed(2)}\n` +
                 `‚è∞ ${daysOverdue} dias em atraso\n\n`;
    });
    
    message += `‚ö†Ô∏è **Aten√ß√£o:** D√≠vidas em atraso podem gerar juros e multas. Considere quitar o quanto antes.`;
    
    return message;
  }

  /**
   * Formatar pr√≥ximos vencimentos
   * @param {Array} upcomingDebts - Pr√≥ximos vencimentos
   * @returns {string} - Mensagem formatada
   */
  formatUpcomingDebtsMessage(upcomingDebts) {
    let message = `üìÖ **Pr√≥ximos vencimentos (7 dias):**\n\n`;
    
    upcomingDebts.forEach((debt, index) => {
      const daysUntilDue = Math.ceil((new Date(debt.due_date) - new Date()) / (1000 * 60 * 60 * 24));
      const priorityEmoji = this.getPriorityEmoji(debt.priority);
      
      message += `${index + 1}. ${priorityEmoji} **${debt.creditor_name}**\n` +
                 `üí∞ R$ ${parseFloat(debt.current_amount).toFixed(2)}\n` +
                 `‚è∞ Vence em ${daysUntilDue} dias\n\n`;
    });
    
    message += `üí° **Dica:** Organize-se para n√£o atrasar os pagamentos e evitar juros.`;
    
    return message;
  }

  /**
   * Obter emoji para prioridade
   * @param {string} priority - Prioridade da d√≠vida
   * @returns {string} - Emoji correspondente
   */
  getPriorityEmoji(priority) {
    const emojis = {
      'low': 'üü¢',
      'medium': 'üü°',
      'high': 'üü†',
      'urgent': 'üî¥'
    };
    return emojis[priority] || 'üü°';
  }

  /**
   * Mensagem quando n√£o h√° d√≠vidas
   * @param {string} status - Status filtrado
   * @param {string} category - Categoria filtrada
   * @returns {string} - Mensagem
   */
  getNoDebtsMessage(status, category) {
    const statusText = status === 'pending' ? 'ativas' : status;
    const categoryText = category ? ` na categoria "${category}"` : '';
    
    return `üì≠ Voc√™ n√£o tem d√≠vidas ${statusText}${categoryText}.\n\n` +
           `üí° Para registrar uma nova d√≠vida, envie algo como:\n` +
           `"Registrar d√≠vida R$ 1000 cart√£o Nubank vence dia 15"`;
  }

  /**
   * Mensagem de ajuda
   * @returns {string} - Mensagem de ajuda
   */
  getHelpMessage() {
    return `üí≥ **Comandos de D√≠vidas Dispon√≠veis:**\n\n` +
           `üìù **Registrar d√≠vida:**\n` +
           `‚Ä¢ "Registrar d√≠vida R$ 5000 cart√£o Nubank vence dia 15"\n` +
           `‚Ä¢ "Devo R$ 2000 para Jo√£o empr√©stimo pessoal"\n\n` +
           `üìã **Ver d√≠vidas:**\n` +
           `‚Ä¢ "Minhas d√≠vidas"\n` +
           `‚Ä¢ "D√≠vidas ativas"\n` +
           `‚Ä¢ "D√≠vidas quitadas"\n\n` +
           `üí∞ **Pagar d√≠vida:**\n` +
           `‚Ä¢ "Pagar d√≠vida Nubank R$ 500"\n` +
           `‚Ä¢ "Paguei R$ 1000 empr√©stimo Jo√£o"\n\n` +
           `üìä **Consultas:**\n` +
           `‚Ä¢ "Status d√≠vidas"\n` +
           `‚Ä¢ "D√≠vidas em atraso"\n` +
           `‚Ä¢ "Pr√≥ximos vencimentos"\n\n` +
           `üóëÔ∏è **Deletar:**\n` +
           `‚Ä¢ "Deletar d√≠vida Nubank"`;
  }

  /**
   * Log de a√ß√£o relacionada a d√≠vida
   * @param {string} action - A√ß√£o realizada
   * @param {string} userId - ID do usu√°rio
   * @param {Object} debt - D√≠vida
   */
  logDebtAction(action, userId, debt) {
    console.log(`üí≥ ${action}:`, {
      userId,
      debtId: debt.id,
      creditor: debt.creditor_name,
      amount: debt.current_amount
    });
  }

  /**
   * Tratar erros espec√≠ficos de d√≠vidas
   * @param {Error} error - Erro ocorrido
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Dados da an√°lise
   * @param {string} action - A√ß√£o que causou o erro
   * @returns {string} - Mensagem de erro
   */
  handleError(error, userId, analysisResult, action) {
    console.error(`‚ùå Erro ao processar ${action}:`, error);
    
    if (error.message.includes('n√£o encontrada')) {
      return error.message;
    }
    
    if (error.message.includes('valida√ß√£o')) {
      return `‚ùå Dados inv√°lidos: ${error.message}`;
    }
    
    return `‚ùå Erro ao processar ${action}. Tente novamente ou use "ajuda d√≠vidas" para ver os comandos dispon√≠veis.`;
  }

  /**
   * Extrair nome do credor da descri√ß√£o
   * @param {string} description - Descri√ß√£o da d√≠vida
   * @returns {string} - Nome do credor
   */
  extractCreditorFromDescription(description) {
     if (!description) return 'Credor n√£o informado';
     
     const lowerDesc = description.toLowerCase();
     
     // Padr√µes espec√≠ficos para extrair credor
      const patterns = [
        /(?:d√≠vida|divida)\s+(?:com|do|da)\s+(?:o\s+)?([\w\s]+?)(?:\s+(?:no|na|de)\s+valor|\s+valor|\s+de\s+r\$|\s+r\$|$)/i,
        /(?:cart√£o|cartao)\s+([\w\s]+?)(?:\s+(?:no|na|de)\s+valor|\s+valor|\s+de\s+r\$|\s+r\$|$)/i,
        /(?:banco|empr√©stimo|emprestimo)\s+([\w\s]+?)(?:\s+(?:no|na|de)\s+valor|\s+valor|\s+de\s+r\$|\s+r\$|$)/i,
        /(?:financiamento)\s+([\w\s]+?)(?:\s+(?:no|na|de)\s+valor|\s+valor|\s+de\s+r\$|\s+r\$|$)/i,
        /(?:agiota)\s*([\w\s]*?)(?:\s+(?:no|na|de)\s+valor|\s+valor|\s+de\s+r\$|\s+r\$|$)/i
      ];
     
     for (const pattern of patterns) {
       const match = description.match(pattern);
       if (match && match[1] && match[1].trim()) {
         return match[1].trim();
       }
     }
     
     // Buscar por nomes de bancos/institui√ß√µes conhecidas
     const creditorKeywords = {
       'nubank': 'Nubank',
       'itau': 'Ita√∫',
       'bradesco': 'Bradesco',
       'santander': 'Santander',
       'caixa': 'Caixa',
       'bb': 'Banco do Brasil',
       'inter': 'Inter',
       'agiota': 'Agiota'
     };
     
     for (const [keyword, name] of Object.entries(creditorKeywords)) {
       if (lowerDesc.includes(keyword)) {
         return name;
       }
     }
     
     // Se cont√©m "agiota" sem nome espec√≠fico
     if (lowerDesc.includes('agiota')) {
       return 'Agiota';
     }
     
     return 'Credor n√£o identificado';
   }

  /**
   * Mapear categoria do Gemini para formato do banco
   * @param {string} geminiCategory - Categoria do Gemini
   * @returns {string} - Categoria mapeada
   */
  mapCategoryFromGemini(geminiCategory) {
    if (!geminiCategory) return 'other';
    
    const categoryMap = {
      'pessoal': 'personal',
      'cart√£o': 'credit_card',
      'cartao': 'credit_card',
      'empr√©stimo': 'loan',
      'emprestimo': 'loan',
      'financiamento': 'financing',
      'fornecedor': 'supplier',
      'outros': 'other',
      'other': 'other'
    };
    
    const lowerCategory = geminiCategory.toLowerCase();
    return categoryMap[lowerCategory] || 'other';
  }
}

module.exports = DebtHandler;