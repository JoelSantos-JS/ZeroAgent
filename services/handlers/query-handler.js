const BaseHandler = require('./base-handler');
const ResponseFormatter = require('../formatters/response-formatter');

/**
 * Handler espec√≠fico para processamento de consultas e queries
 * Herda funcionalidades comuns do BaseHandler
 */
class QueryHandler extends BaseHandler {
  constructor(databaseService, userService) {
    super(databaseService, userService);
  }

  /**
   * Processar consulta do usu√°rio
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise do Gemini
   * @returns {Promise<string>} - Resposta formatada
   */
  async process(userId, analysisResult) {
    try {
      const { intencao } = analysisResult;
      
      console.log('üìä Processando consulta:', intencao);
      
      switch (intencao) {
        case 'abrir_sessao':
        case 'iniciar_conversa':
        case 'saudacao':
          return this.handleWelcomeMessage(userId);
          
        case 'consultar_gastos_mes':
        case 'gastos_mes':
          return await this.getMonthlyExpenses(userId);
          
        case 'consultar_receitas_mes':
        case 'receitas_mes':
          return await this.getMonthlyIncome(userId);
          
        case 'consultar_saldo':
        case 'saldo_atual':
          return await this.getCurrentBalance(userId);
          
        case 'consultar_investimentos':
        case 'portfolio':
          return await this.getInvestmentSummary(userId);
          
        case 'resumo_financeiro':
        case 'relatorio_geral':
          return await this.getFinancialSummary(userId);
          
        case 'gastos_categoria':
          return await this.getExpensesByCategory(userId, analysisResult);
          
        case 'ultimas_transacoes':
        case 'historico':
          return await this.getRecentTransactions(userId);
          
        case 'metas_orcamento':
        case 'orcamento':
          return await this.getBudgetStatus(userId);
          
        default:
          return await this.handleGenericQuery(userId, analysisResult);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao processar consulta:', error);
      return '‚ùå Erro ao processar sua consulta. Tente novamente.';
    }
  }

  /**
   * Tratar mensagem de boas-vindas
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Mensagem de boas-vindas
   */
  async handleWelcomeMessage(userId) {
    try {
      // Buscar nome do usu√°rio se dispon√≠vel
      const user = await this.databaseService.getUserById(userId);
      const userName = user?.name || null;
      
      return ResponseFormatter.formatWelcomeMessage(userName);
    } catch (error) {
      return ResponseFormatter.formatWelcomeMessage();
    }
  }

  /**
   * Obter gastos do m√™s atual
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Resumo dos gastos mensais
   */
  async getMonthlyExpenses(userId) {
    try {
      const userContext = await this.getUserContext(userId);
      const monthlySpent = userContext.monthlySpent || 0;
      
      if (monthlySpent === 0) {
        return 'üìä Voc√™ ainda n√£o registrou gastos este m√™s.';
      }
      
      // Buscar gastos por categoria
      const transactions = await this.databaseService.getUserTransactions(userId, 100);
      const thisMonth = new Date();
      thisMonth.setDate(1);
      thisMonth.setHours(0, 0, 0, 0);
      
      const monthlyExpenses = transactions.filter(t => 
        new Date(t.date) >= thisMonth && t.amount < 0
      );
      
      const expensesByCategory = this.groupTransactionsByCategory(monthlyExpenses);
      
      let response = `üìä **Gastos deste m√™s**: ${ResponseFormatter.formatCurrency(monthlySpent)}\n\n`;
      
      if (Object.keys(expensesByCategory).length > 0) {
        response += 'üìã **Por categoria:**\n';
        Object.entries(expensesByCategory)
          .sort(([,a], [,b]) => b.total - a.total)
          .slice(0, 5)
          .forEach(([category, data]) => {
            response += `‚Ä¢ ${ResponseFormatter.formatCategory(category)}: ${ResponseFormatter.formatCurrency(Math.abs(data.total))}\n`;
          });
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter gastos mensais:', error);
      return '‚ùå Erro ao consultar gastos mensais.';
    }
  }

  /**
   * Obter receitas do m√™s atual
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Resumo das receitas mensais
   */
  async getMonthlyIncome(userId) {
    try {
      const transactions = await this.databaseService.getUserTransactions(userId, 100);
      const thisMonth = new Date();
      thisMonth.setDate(1);
      thisMonth.setHours(0, 0, 0, 0);
      
      const monthlyIncomes = transactions.filter(t => 
        new Date(t.date) >= thisMonth && t.amount > 0
      );
      
      const totalIncome = monthlyIncomes.reduce((sum, t) => sum + t.amount, 0);
      
      if (totalIncome === 0) {
        return 'üìä Voc√™ ainda n√£o registrou receitas este m√™s.';
      }
      
      const incomesByCategory = this.groupTransactionsByCategory(monthlyIncomes);
      
      let response = `üí∞ **Receitas deste m√™s**: ${ResponseFormatter.formatCurrency(totalIncome)}\n\n`;
      
      if (Object.keys(incomesByCategory).length > 0) {
        response += 'üìã **Por categoria:**\n';
        Object.entries(incomesByCategory)
          .sort(([,a], [,b]) => b.total - a.total)
          .forEach(([category, data]) => {
            response += `‚Ä¢ ${ResponseFormatter.formatCategory(category)}: ${ResponseFormatter.formatCurrency(data.total)}\n`;
          });
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter receitas mensais:', error);
      return '‚ùå Erro ao consultar receitas mensais.';
    }
  }

  /**
   * Obter saldo atual
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Saldo atual
   */
  async getCurrentBalance(userId) {
    try {
      const transactions = await this.databaseService.getUserTransactions(userId, 1000);
      const balance = transactions.reduce((sum, t) => sum + t.amount, 0);
      
      const thisMonth = new Date();
      thisMonth.setDate(1);
      thisMonth.setHours(0, 0, 0, 0);
      
      const monthlyTransactions = transactions.filter(t => new Date(t.date) >= thisMonth);
      const monthlyBalance = monthlyTransactions.reduce((sum, t) => sum + t.amount, 0);
      
      let response = `üí∞ **Saldo geral**: ${ResponseFormatter.formatCurrency(balance)}\n`;
      response += `üìÖ **Saldo deste m√™s**: ${ResponseFormatter.formatCurrency(monthlyBalance)}`;
      
      if (balance < 0) {
        response += '\n‚ö†Ô∏è Aten√ß√£o: Seu saldo est√° negativo!';
      } else if (balance > 0) {
        response += '\n‚úÖ Parab√©ns! Voc√™ est√° no azul!';
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter saldo:', error);
      return '‚ùå Erro ao consultar saldo.';
    }
  }

  /**
   * Obter resumo de investimentos
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Resumo dos investimentos
   */
  async getInvestmentSummary(userId) {
    try {
      const transactions = await this.databaseService.getUserTransactions(userId, 100);
      const investments = transactions.filter(t => t.type === 'investment');
      
      if (investments.length === 0) {
        return 'üìà Voc√™ ainda n√£o possui investimentos registrados.';
      }
      
      const totalInvested = investments.reduce((sum, inv) => sum + inv.amount, 0);
      const investmentsByCategory = this.groupTransactionsByCategory(investments);
      
      let response = `üìà **Total investido**: ${ResponseFormatter.formatCurrency(totalInvested)}\n`;
      response += `üìä **N√∫mero de investimentos**: ${investments.length}\n\n`;
      
      if (Object.keys(investmentsByCategory).length > 0) {
        response += 'üìã **Por categoria:**\n';
        Object.entries(investmentsByCategory)
          .sort(([,a], [,b]) => b.total - a.total)
          .forEach(([category, data]) => {
            const percentage = ((data.total / totalInvested) * 100).toFixed(1);
            response += `‚Ä¢ ${ResponseFormatter.formatCategory(category)}: ${ResponseFormatter.formatCurrency(data.total)} (${percentage}%)\n`;
          });
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter resumo de investimentos:', error);
      return '‚ùå Erro ao consultar investimentos.';
    }
  }

  /**
   * Obter resumo financeiro completo
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Resumo financeiro
   */
  async getFinancialSummary(userId) {
    try {
      const userContext = await this.getUserContext(userId);
      const transactions = await this.databaseService.getUserTransactions(userId, 1000);
      
      const totalTransactions = transactions.length;
      const totalSpent = Math.abs(transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));
      const totalIncome = transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
      const balance = totalIncome - totalSpent;
      
      const summary = {
        totalTransactions,
        totalSpent,
        totalIncome,
        monthlySpent: userContext.monthlySpent || 0,
        topCategories: userContext.topCategories || []
      };
      
      return ResponseFormatter.formatTransactionSummary(summary);
      
    } catch (error) {
      console.error('‚ùå Erro ao obter resumo financeiro:', error);
      return '‚ùå Erro ao gerar resumo financeiro.';
    }
  }

  /**
   * Obter gastos por categoria
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise
   * @returns {Promise<string>} - Gastos por categoria
   */
  async getExpensesByCategory(userId, analysisResult) {
    try {
      const { categoria } = analysisResult;
      const transactions = await this.databaseService.getUserTransactions(userId, 100);
      
      let filteredTransactions = transactions.filter(t => t.amount < 0);
      
      if (categoria && categoria !== 'todas') {
        filteredTransactions = filteredTransactions.filter(t => 
          t.category?.toLowerCase() === categoria.toLowerCase()
        );
      }
      
      if (filteredTransactions.length === 0) {
        const categoryText = categoria ? ` na categoria ${ResponseFormatter.formatCategory(categoria)}` : '';
        return `üìä Nenhum gasto encontrado${categoryText}.`;
      }
      
      const total = Math.abs(filteredTransactions.reduce((sum, t) => sum + t.amount, 0));
      const categoryText = categoria ? ` - ${ResponseFormatter.formatCategory(categoria)}` : '';
      
      let response = `üìä **Gastos${categoryText}**: ${ResponseFormatter.formatCurrency(total)}\n\n`;
      
      // Mostrar √∫ltimas transa√ß√µes
      response += 'üìã **√öltimas transa√ß√µes:**\n';
      filteredTransactions.slice(0, 5).forEach(t => {
        response += `‚Ä¢ ${ResponseFormatter.formatCurrency(Math.abs(t.amount))} - ${t.description} (${ResponseFormatter.formatDate(new Date(t.date))})\n`;
      });
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter gastos por categoria:', error);
      return '‚ùå Erro ao consultar gastos por categoria.';
    }
  }

  /**
   * Obter transa√ß√µes recentes
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Transa√ß√µes recentes
   */
  async getRecentTransactions(userId) {
    try {
      const transactions = await this.databaseService.getUserTransactions(userId, 10);
      
      if (transactions.length === 0) {
        return 'üìä Nenhuma transa√ß√£o encontrada.';
      }
      
      let response = 'üìã **√öltimas transa√ß√µes:**\n\n';
      
      transactions.forEach(t => {
        const type = t.amount > 0 ? 'üí∞' : 'üí∏';
        const amount = ResponseFormatter.formatCurrency(Math.abs(t.amount));
        const category = ResponseFormatter.formatCategory(t.category);
        const date = ResponseFormatter.formatDate(new Date(t.date));
        
        response += `${type} ${amount} - ${category}\n`;
        response += `   ${t.description} (${date})\n\n`;
      });
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter transa√ß√µes recentes:', error);
      return '‚ùå Erro ao consultar transa√ß√µes recentes.';
    }
  }

  /**
   * Obter status do or√ßamento
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<string>} - Status do or√ßamento
   */
  async getBudgetStatus(userId) {
    try {
      const userContext = await this.getUserContext(userId);
      const monthlySpent = userContext.monthlySpent || 0;
      const monthlyLimit = 5000; // Limite padr√£o - pode ser configur√°vel
      
      const percentage = (monthlySpent / monthlyLimit) * 100;
      const remaining = monthlyLimit - monthlySpent;
      
      let response = `üí≥ **Status do Or√ßamento**\n\n`;
      response += `üìä **Gasto atual**: ${ResponseFormatter.formatCurrency(monthlySpent)}\n`;
      response += `üéØ **Limite mensal**: ${ResponseFormatter.formatCurrency(monthlyLimit)}\n`;
      response += `üìà **Utilizado**: ${percentage.toFixed(1)}%\n`;
      response += `üí∞ **Dispon√≠vel**: ${ResponseFormatter.formatCurrency(remaining)}\n\n`;
      
      if (percentage >= 100) {
        response += 'üö® **Aten√ß√£o**: Voc√™ ultrapassou seu or√ßamento mensal!';
      } else if (percentage >= 80) {
        response += '‚ö†Ô∏è **Cuidado**: Voc√™ est√° pr√≥ximo do limite do or√ßamento.';
      } else if (percentage >= 60) {
        response += 'üìä **Aten√ß√£o**: Voc√™ j√° gastou mais da metade do or√ßamento.';
      } else {
        response += '‚úÖ **Parab√©ns**: Voc√™ est√° dentro do or√ßamento!';
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter status do or√ßamento:', error);
      return '‚ùå Erro ao consultar status do or√ßamento.';
    }
  }

  /**
   * Tratar consulta gen√©rica
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise
   * @returns {Promise<string>} - Resposta gen√©rica
   */
  async handleGenericQuery(userId, analysisResult) {
    try {
      // Tentar identificar o que o usu√°rio quer baseado na descri√ß√£o
      const { descricao } = analysisResult;
      const text = (descricao || '').toLowerCase();
      
      if (text.includes('saldo') || text.includes('quanto tenho')) {
        return await this.getCurrentBalance(userId);
      }
      
      if (text.includes('gasto') || text.includes('gastei')) {
        return await this.getMonthlyExpenses(userId);
      }
      
      if (text.includes('receita') || text.includes('ganho')) {
        return await this.getMonthlyIncome(userId);
      }
      
      if (text.includes('investimento') || text.includes('portfolio')) {
        return await this.getInvestmentSummary(userId);
      }
      
      // Resposta padr√£o
      return await this.getFinancialSummary(userId);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar consulta gen√©rica:', error);
      return '‚ùå N√£o entendi sua consulta. Tente perguntar sobre gastos, receitas, saldo ou investimentos.';
    }
  }

  /**
   * Agrupar transa√ß√µes por categoria
   * @param {Array} transactions - Lista de transa√ß√µes
   * @returns {Object} - Transa√ß√µes agrupadas por categoria
   */
  groupTransactionsByCategory(transactions) {
    const grouped = {};
    
    transactions.forEach(t => {
      const category = t.category || 'outros';
      if (!grouped[category]) {
        grouped[category] = {
          total: 0,
          count: 0,
          transactions: []
        };
      }
      
      grouped[category].total += t.amount;
      grouped[category].count += 1;
      grouped[category].transactions.push(t);
    });
    
    return grouped;
  }
}

module.exports = QueryHandler;