const logger = require('../../../utils/logger');

/**
 * Gerenciador especializado para vendas por reconhecimento de imagem
 * Extra√≠do do sales-handler.js para modulariza√ß√£o
 */
class ImageSalesManager {
  constructor(databaseService) {
    this.databaseService = databaseService;
    
    // Cache de contexto de produtos identificados por imagem
    this.imageProductContext = new Map(); // userId -> productData
    this.contextTimeout = 5 * 60 * 1000; // 5 minutos
    
    // M√©tricas espec√≠ficas de vendas por imagem
    this.metrics = {
      totalImageSales: 0,
      totalImageRevenue: 0,
      averageConfidence: 0
    };
  }

  /**
   * Processar venda de produto identificado por imagem
   * Extra√≠do de: sales-handler.js linhas 391-456
   */
  async handleImageProductSale(userId, analysisResult) {
    try {
      const { produto_nome, produto_id, valor, confianca, similaridade } = analysisResult;
      
      console.log('üõí Processando venda de produto identificado por imagem:', {
        produto: produto_nome,
        confianca,
        similaridade
      });
      
      // Buscar dados completos do produto no banco
      let product = null;
      if (produto_id) {
        const products = await this.databaseService.getUserProducts(userId, 100);
        product = products.find(p => p.id === produto_id);
      }
      
      if (!product) {
        // Buscar por nome se n√£o encontrou por ID
        const products = await this.databaseService.getUserProducts(userId, 100);
        product = products.find(p => 
          (p.name && p.name.toLowerCase().includes(produto_nome.toLowerCase())) ||
          (p.product_name && p.product_name.toLowerCase().includes(produto_nome.toLowerCase()))
        );
      }
      
      if (!product) {
        return `‚ùå **Produto n√£o encontrado no banco de dados**\n\n` +
               `üì∏ Identifiquei: **${produto_nome}**\n` +
               `‚ö†Ô∏è Confian√ßa: ${(confianca * 100).toFixed(0)}%\n\n` +
               `üí° *O produto precisa estar cadastrado para registrar vendas.*`;
      }
      
      // Verificar se tem pre√ßo cadastrado
      const sellingPrice = product.selling_price || product.price || valor;
      
      // Salvar contexto do produto para pr√≥xima intera√ß√£o
      this.saveImageProductContext(userId, {
        product: product,
        sellingPrice: sellingPrice,
        confianca: confianca,
        produto_nome: produto_nome
      });
      
      if (sellingPrice && sellingPrice > 0) {
        // Produto tem pre√ßo - sugerir pre√ßo cadastrado
        return `‚úÖ **${product.name || product.product_name}** identificado!\n\n` +
               `üìä **Confian√ßa:** ${(confianca * 100).toFixed(0)}%\n` +
               `üí∞ **Pre√ßo cadastrado:** R$ ${sellingPrice.toFixed(2)}\n\n` +
               `‚ùì **Foi vendido por R$ ${sellingPrice.toFixed(2)}?**\n\n` +
               `‚Ä¢ Digite "sim" ou "ok" para confirmar\n` +
               `‚Ä¢ Digite o valor real da venda (ex: 85.00)\n` +
               `‚Ä¢ Digite "n√£o" para cancelar`;
      } else {
        // Produto sem pre√ßo - solicitar valor
        return `‚úÖ **${product.name || product.product_name}** identificado!\n\n` +
               `üìä **Confian√ßa:** ${(confianca * 100).toFixed(0)}%\n\n` +
               `üí∞ **Qual foi o valor da venda?**\n` +
               `üí° *Digite o valor em reais (ex: 89.90)*`;
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao processar venda de imagem:', error);
      return '‚ùå Erro ao processar venda do produto identificado. Tente novamente.';
    }
  }

  /**
   * Verificar se √© confirma√ß√£o de venda de produto identificado por imagem
   * Extra√≠do de: sales-handler.js linhas 463-504
   */
  isImageSaleConfirmation(descricao, userId) {
    if (!descricao || !userId) return false;
    
    // PRIMEIRO: Verificar se h√° contexto de venda ativo
    const context = this.imageProductContext.get(userId);
    if (!context) return false; // Sem contexto, n√£o √© confirma√ß√£o de venda
    
    // Verificar se n√£o expirou
    const elapsed = Date.now() - context.timestamp;
    if (elapsed > this.contextTimeout) {
      this.imageProductContext.delete(userId);
      return false;
    }
    
    const text = descricao.toLowerCase().trim();
    
    // Verificar confirma√ß√µes
    const confirmations = ['sim', 'ok', 'confirmar', 'confirmo', 'yes'];
    if (confirmations.includes(text)) return true;
    
    // Verificar valores monet√°rios (incluindo "reais", "R$", etc.)
    const pricePattern = /^\d+([.,]\d{1,2})?\s*(reais?|r\$?)?$/i;
    if (pricePattern.test(text.replace(',', '.'))) return true;
    
    // Verificar padr√µes alternativos como "R$ 70", "70.00 reais", etc.
    const altPricePattern = /(r\$?\s*)?\d+([.,]\d{1,2})?(\s*(reais?|r\$?))?/i;
    if (altPricePattern.test(text)) return true;
    
    // Verificar nega√ß√µes
    const negations = ['n√£o', 'nao', 'no', 'cancelar', 'cancel'];
    if (negations.includes(text)) return true;
    
    return false;
  }

  /**
   * Processar confirma√ß√£o de venda de produto identificado por imagem
   * Extra√≠do de: sales-handler.js linhas 504-564
   */
  async handleImageSaleConfirmation(userId, analysisResult) {
    try {
      const { descricao } = analysisResult;
      const text = descricao.toLowerCase().trim();
      
      console.log('üîÑ Processando confirma√ß√£o de venda por imagem:', text);
      
      // Verificar se √© cancelamento
      const negations = ['n√£o', 'nao', 'no', 'cancelar', 'cancel'];
      if (negations.includes(text)) {
        this.clearImageProductContext(userId);
        return '‚ùå **Venda cancelada**\n\nüí° *Envie uma nova foto quando quiser registrar uma venda.*';
      }
      
      // Buscar √∫ltimo produto identificado por imagem no contexto do usu√°rio
      const lastImageProduct = this.getLastImageProductContext(userId);
      
      if (!lastImageProduct) {
        return '‚ùå **Contexto perdido**\n\n' +
               'üí° *Envie a foto do produto novamente para registrar a venda.*';
      }
      
      const confirmations = ['sim', 'ok', 'confirmar', 'confirmo', 'yes'];
      if (confirmations.includes(text)) {
        // Confirmar com pre√ßo cadastrado
        const salePrice = lastImageProduct.sellingPrice;
        return await this.registerImageSale(userId, lastImageProduct, salePrice);
      }
      
      // Verificar se √© um valor monet√°rio (melhorado para portugu√™s brasileiro)
      const price = this.extractPriceFromText(text);
      if (price !== null) {
        if (price <= 0) {
          return '‚ùå **Valor inv√°lido**\n\nüí° *Digite um valor maior que zero (ex: 89.90)*';
        }
        
        // Registrar com pre√ßo informado pelo usu√°rio
        return await this.registerImageSale(userId, lastImageProduct, price);
      }
      
      return '‚ùì **N√£o entendi sua resposta**\n\n' +
             'Responda com:\n' +
             '‚Ä¢ "sim" ou "ok" para confirmar o pre√ßo\n' +
             '‚Ä¢ O valor da venda (ex: 85.00)\n' +
             '‚Ä¢ "n√£o" para cancelar';
      
    } catch (error) {
      console.error('‚ùå Erro ao processar confirma√ß√£o:', error);
      return '‚ùå Erro ao processar confirma√ß√£o. Tente novamente.';
    }
  }

  /**
   * Extrair pre√ßo de texto em portugu√™s brasileiro
   * @param {string} text - Texto a ser analisado
   * @returns {number|null} - Pre√ßo extra√≠do ou null se n√£o encontrado
   */
  extractPriceFromText(text) {
    // Remover espa√ßos e converter para min√∫sculas
    const cleanText = text.toLowerCase().trim();
    
    // Padr√µes para valores monet√°rios em portugu√™s brasileiro
    const patterns = [
      // "80 reais", "50 real"
      /(?:por\s+)?(\d+(?:[.,]\d{1,2})?)\s*(?:reais?|r\$?)\s*$/,
      // "R$ 80", "r$ 50.00"
      /^r\$?\s*(\d+(?:[.,]\d{1,2})?)\s*$/,
      // "80.00", "50,90", "80"
      /^(\d+(?:[.,]\d{1,2})?)\s*$/,
      // "por 80", "custou 50"
      /(?:por|custou|vendi|vendido)\s+(\d+(?:[.,]\d{1,2})?)\s*(?:reais?)?\s*$/
    ];
    
    for (const pattern of patterns) {
      const match = cleanText.match(pattern);
      if (match) {
        const priceStr = match[1].replace(',', '.');
        const price = parseFloat(priceStr);
        if (!isNaN(price) && price > 0) {
          return price;
        }
      }
    }
    
    return null;
  }

  /**
   * Salvar contexto de produto identificado por imagem
   * Extra√≠do de: sales-handler.js linhas 1843-1862
   */
  saveImageProductContext(userId, productData) {
    const contextData = {
      ...productData,
      timestamp: Date.now()
    };
    
    this.imageProductContext.set(userId, contextData);
    
    // Limpar contexto ap√≥s timeout (igual ao original)
    setTimeout(() => {
      const currentContext = this.imageProductContext.get(userId);
      if (currentContext && currentContext.timestamp === contextData.timestamp) {
        this.imageProductContext.delete(userId);
        console.log(`üóëÔ∏è Contexto auto-removido para usu√°rio: ${userId}`);
      }
    }, this.contextTimeout);
    
    console.log('üíæ Contexto de produto salvo para usu√°rio:', userId);
  }

  /**
   * Obter √∫ltimo produto identificado por imagem
   * Extra√≠do de: sales-handler.js linhas 1862-1886
   */
  async getLastImageProductContext(userId) {
    const context = this.imageProductContext.get(userId);
    
    if (!context) {
      return null;
    }
    
    // Verificar se n√£o expirou
    const elapsed = Date.now() - (context.timestamp || Date.now());
    if (elapsed > this.contextTimeout) {
      this.imageProductContext.delete(userId);
      console.log(`üóëÔ∏è Contexto expirado removido para usu√°rio: ${userId}`);
      return null;
    }
    
    return context;
  }

  /**
   * Limpar contexto de produto
   */
  clearImageProductContext(userId) {
    this.imageProductContext.delete(userId);
    console.log('üóëÔ∏è Contexto de produto removido para usu√°rio:', userId);
  }

  /**
   * Registrar venda de produto identificado por imagem
   * Extra√≠do de: sales-handler.js linhas 1886-1955
   */
  async registerImageSale(userId, productContext, salePrice) {
    try {
      const { product, produto_nome, confianca } = productContext;
      
      // Usar nome do produto do banco de dados (priorit√°rio) ou nome identificado pela IA
      const finalProductName = (product && (product.name || product.product_name)) || produto_nome || 'Produto n√£o identificado';
      
      console.log('üí∞ Registrando venda por imagem:', {
        produto: finalProductName,
        preco: salePrice,
        usuario: userId
      });
      
      // Registrar como receita no sistema financeiro
      await this.databaseService.createRevenue(
        userId,
        salePrice,
        'vendas',
        `Venda: ${finalProductName} (identificado por IA)`,
        new Date(),
        'vendas_ai'
      );
      
      // Atualizar m√©tricas
      this.metrics.totalImageSales++;
      this.metrics.totalImageRevenue += salePrice;
      this.metrics.averageConfidence = (
        (this.metrics.averageConfidence * (this.metrics.totalImageSales - 1) + confianca) / 
        this.metrics.totalImageSales
      );
      
      // Limpar contexto ap√≥s registro
      this.clearImageProductContext(userId);
      
      // Calcular lucro se houver pre√ßo de custo
      const costPrice = (product && product.cost_price) || 0;
      const profit = costPrice > 0 ? salePrice - costPrice : null;
      const margin = profit && costPrice > 0 ? ((profit / salePrice) * 100) : null;
      
      let response = `‚úÖ **Venda Registrada com Sucesso!**\n\n`;
      response += `üõí **Produto:** ${finalProductName}\n`;
      response += `üí∞ **Valor:** R$ ${salePrice.toFixed(2)}\n`;
      response += `üìä **Confian√ßa IA:** ${(confianca * 100).toFixed(0)}%\n`;
      
      if (profit !== null) {
        response += `\nüíπ **An√°lise Financeira:**\n`;
        response += `‚Ä¢ **Custo:** R$ ${costPrice.toFixed(2)}\n`;
        response += `‚Ä¢ **Lucro:** R$ ${profit.toFixed(2)}\n`;
        if (margin !== null) {
          response += `‚Ä¢ **Margem:** ${margin.toFixed(1)}%\n`;
        }
      }
      
      response += `\nüìÖ **Data:** ${new Date().toLocaleDateString('pt-BR')}\n`;
      response += `ü§ñ **M√©todo:** Reconhecimento por IA`;
      
      logger.info('Venda por imagem registrada', {
        userId,
        produto: finalProductName,
        valor: salePrice,
        confianca
      });
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao registrar venda por imagem:', error);
      logger.error('Erro no registro de venda por imagem', {
        userId,
        error: error.message
      });
      
      return '‚ùå **Erro ao registrar venda**\n\n' +
             'Ocorreu um erro ao salvar a transa√ß√£o. Tente novamente ou registre manualmente.';
    }
  }

  /**
   * Obter m√©tricas de vendas por imagem
   */
  getMetrics() {
    return {
      ...this.metrics,
      activeContexts: this.imageProductContext.size
    };
  }

  /**
   * Obter status do manager
   */
  getStatus() {
    return {
      isActive: true,
      contextTimeout: this.contextTimeout,
      metrics: this.getMetrics()
    };
  }
}

module.exports = ImageSalesManager;