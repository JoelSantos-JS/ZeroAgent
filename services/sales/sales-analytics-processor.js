const logger = require('../../utils/logger');

/**
 * Processador especializado para an√°lises e consultas de vendas
 */
class SalesAnalyticsProcessor {
  constructor(databaseService) {
    this.databaseService = databaseService;
  }

  /**
   * Verificar se √© consulta de vendas
   * @param {string} descricao - Descri√ß√£o da mensagem
   * @param {string} intencao - Inten√ß√£o identificada
   * @returns {boolean}
   */
  isSalesQuery(descricao, intencao) {
    const salesKeywords = [
      'vendas', 'venda', 'faturamento', 'receita', 'lucro',
      'relat√≥rio', 'relatorio', 'an√°lise', 'analise',
      'performance', 'resultado', 'balan√ßo', 'balanco'
    ];
    
    const text = descricao.toLowerCase();
    return salesKeywords.some(keyword => text.includes(keyword)) ||
           intencao === 'consultar_vendas' ||
           intencao === 'relatorio_vendas';
  }

  /**
   * Verificar se √© consulta de estoque
   * @param {string} descricao - Descri√ß√£o da mensagem
   * @param {string} intencao - Inten√ß√£o identificada
   * @returns {boolean}
   */
  isStockQuery(descricao, intencao) {
    const stockKeywords = [
      'estoque', 'stock', 'quantidade', 'qtd',
      'dispon√≠vel', 'disponivel', 'tem',
      'sobrou', 'restou', 'invent√°rio', 'inventario'
    ];
    
    const text = descricao.toLowerCase();
    return stockKeywords.some(keyword => text.includes(keyword)) ||
           intencao === 'consultar_estoque' ||
           intencao === 'verificar_estoque';
  }

  /**
   * Processar consulta de vendas
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise
   * @returns {Promise<string>} - Resposta formatada
   */
  async handleSalesQuery(userId, analysisResult) {
    try {
      console.log('üìä Processando consulta de vendas para usu√°rio:', userId);
      
      const salesData = await this.getSalesAnalytics(userId);
      
      if (!salesData || salesData.totalSales === 0) {
        return 'üìä **Relat√≥rio de Vendas**\n\n' +
               'üìà Ainda n√£o h√° vendas registradas.\n\n' +
               'üí° *Comece registrando suas vendas para ver an√°lises detalhadas!*';
      }
      
      return this.formatSalesReport(salesData);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar consulta de vendas:', error);
      return '‚ùå Erro ao gerar relat√≥rio de vendas. Tente novamente.';
    }
  }

  /**
   * Processar consulta de estoque
   * @param {string} userId - ID do usu√°rio
   * @param {Object} analysisResult - Resultado da an√°lise
   * @returns {Promise<string>} - Resposta formatada
   */
  async handleStockQuery(userId, analysisResult) {
    try {
      console.log('üì¶ Processando consulta de estoque para usu√°rio:', userId);
      
      const productName = this.extractProductName(analysisResult.descricao);
      
      if (productName) {
        // Consulta espec√≠fica de produto
        const stockData = await this.getProductStock(userId, productName);
        return this.formatProductStockResponse(productName, stockData);
      } else {
        // Consulta geral de estoque
        const generalStock = await this.getGeneralStockSummary(userId);
        return this.formatGeneralStockResponse(generalStock);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao processar consulta de estoque:', error);
      return '‚ùå Erro ao consultar estoque. Tente novamente.';
    }
  }

  /**
   * Obter an√°lises de vendas
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<Object>} - Dados de an√°lise
   */
  async getSalesAnalytics(userId) {
    try {
      // Aqui voc√™ implementaria a consulta real ao banco
      // Por enquanto, retornando dados mock
      return {
        totalSales: 0,
        totalRevenue: 0,
        averageTicket: 0,
        topProducts: [],
        monthlyGrowth: 0,
        period: '√∫ltimos 30 dias'
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao obter an√°lises de vendas:', error);
      throw error;
    }
  }

  /**
   * Obter estoque de produto espec√≠fico
   * @param {string} userId - ID do usu√°rio
   * @param {string} productName - Nome do produto
   * @returns {Promise<Object>} - Dados do estoque
   */
  async getProductStock(userId, productName) {
    try {
      // Implementar consulta real ao banco
      return {
        productName,
        currentStock: 0,
        reservedStock: 0,
        availableStock: 0,
        lastUpdate: new Date()
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao obter estoque do produto:', error);
      throw error;
    }
  }

  /**
   * Obter resumo geral do estoque
   * @param {string} userId - ID do usu√°rio
   * @returns {Promise<Object>} - Resumo do estoque
   */
  async getGeneralStockSummary(userId) {
    try {
      // Implementar consulta real ao banco
      return {
        totalProducts: 0,
        totalStock: 0,
        lowStockProducts: [],
        outOfStockProducts: [],
        lastUpdate: new Date()
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao obter resumo do estoque:', error);
      throw error;
    }
  }

  /**
   * Formatar relat√≥rio de vendas
   * @param {Object} salesData - Dados de vendas
   * @returns {string} - Relat√≥rio formatado
   */
  formatSalesReport(salesData) {
    let report = 'üìä **Relat√≥rio de Vendas**\n\n';
    
    report += `üìà **Vendas Totais:** ${salesData.totalSales}\n`;
    report += `üí∞ **Faturamento:** R$ ${salesData.totalRevenue.toFixed(2)}\n`;
    report += `üéØ **Ticket M√©dio:** R$ ${salesData.averageTicket.toFixed(2)}\n`;
    report += `üìÖ **Per√≠odo:** ${salesData.period}\n\n`;
    
    if (salesData.topProducts && salesData.topProducts.length > 0) {
      report += 'üèÜ **Top Produtos:**\n';
      salesData.topProducts.slice(0, 5).forEach((product, index) => {
        report += `${index + 1}. ${product.name}: ${product.sales} vendas\n`;
      });
      report += '\n';
    }
    
    if (salesData.monthlyGrowth !== undefined) {
      const growthIcon = salesData.monthlyGrowth >= 0 ? 'üìà' : 'üìâ';
      report += `${growthIcon} **Crescimento:** ${salesData.monthlyGrowth.toFixed(1)}%`;
    }
    
    return report;
  }

  /**
   * Formatar resposta de estoque de produto
   * @param {string} productName - Nome do produto
   * @param {Object} stockData - Dados do estoque
   * @returns {string} - Resposta formatada
   */
  formatProductStockResponse(productName, stockData) {
    let response = `üì¶ **Estoque: ${productName}**\n\n`;
    
    response += `üìä **Quantidade Total:** ${stockData.currentStock}\n`;
    response += `üîí **Reservado:** ${stockData.reservedStock}\n`;
    response += `‚úÖ **Dispon√≠vel:** ${stockData.availableStock}\n\n`;
    
    if (stockData.availableStock === 0) {
      response += '‚ö†Ô∏è **Status:** Produto em falta\n';
      response += 'üí° *Considere reabastecer o estoque*';
    } else if (stockData.availableStock < 5) {
      response += 'üü° **Status:** Estoque baixo\n';
      response += 'üí° *Recomendado reabastecer em breve*';
    } else {
      response += 'üü¢ **Status:** Estoque adequado';
    }
    
    return response;
  }

  /**
   * Formatar resposta de estoque geral
   * @param {Object} stockData - Dados gerais do estoque
   * @returns {string} - Resposta formatada
   */
  formatGeneralStockResponse(stockData) {
    let response = 'üì¶ **Resumo do Estoque**\n\n';
    
    response += `üìä **Total de Produtos:** ${stockData.totalProducts}\n`;
    response += `üì¶ **Itens em Estoque:** ${stockData.totalStock}\n\n`;
    
    if (stockData.outOfStockProducts && stockData.outOfStockProducts.length > 0) {
      response += 'üî¥ **Produtos em Falta:**\n';
      stockData.outOfStockProducts.slice(0, 5).forEach(product => {
        response += `‚Ä¢ ${product}\n`;
      });
      response += '\n';
    }
    
    if (stockData.lowStockProducts && stockData.lowStockProducts.length > 0) {
      response += 'üü° **Estoque Baixo:**\n';
      stockData.lowStockProducts.slice(0, 5).forEach(product => {
        response += `‚Ä¢ ${product.name} (${product.stock} unidades)\n`;
      });
      response += '\n';
    }
    
    if (stockData.outOfStockProducts.length === 0 && stockData.lowStockProducts.length === 0) {
      response += '‚úÖ **Status:** Todos os produtos com estoque adequado';
    }
    
    return response;
  }

  /**
   * Extrair nome do produto da descri√ß√£o
   * @param {string} descricao - Descri√ß√£o da mensagem
   * @returns {string|null} - Nome do produto ou null
   */
  extractProductName(descricao) {
    // Implementar l√≥gica de extra√ß√£o de nome de produto
    // Por enquanto, retorna null para consulta geral
    const text = descricao.toLowerCase();
    
    // Padr√µes simples para detectar produto espec√≠fico
    const patterns = [
      /estoque\s+(?:do|da|de)\s+(.+)/,
      /quanto\s+(?:tem|tenho)\s+(?:do|da|de)?\s*(.+)/,
      /(.+)\s+(?:tem|tenho|sobrou|restou)/
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    return null;
  }
}

module.exports = SalesAnalyticsProcessor;