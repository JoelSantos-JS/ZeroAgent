const firebaseService = require('../config/firebase');
const databaseService = require('../config/database');
const logger = require('../utils/logger');

class AuthService {
  constructor() {
    this.firebaseService = firebaseService;
  }

  // Inicializar servi√ßo de autentica√ß√£o
  async initialize() {
    try {
      await this.firebaseService.initialize();
      console.log('üîê Servi√ßo de autentica√ß√£o inicializado');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar servi√ßo de autentica√ß√£o:', error);
      throw error;
    }
  }

  // Autenticar usu√°rio e sincronizar com banco local
  async authenticateUser(idToken) {
    try {
      // Verificar token Firebase
      const verificationResult = await this.firebaseService.verifyToken(idToken);
      
      if (!verificationResult.success) {
        return {
          success: false,
          error: 'Token inv√°lido',
          code: 'INVALID_TOKEN'
        };
      }

      const firebaseUser = verificationResult.user;
      
      // Buscar ou criar usu√°rio no banco local
      let localUser = await databaseService.getUserByFirebaseUid(firebaseUser.uid);
      
      if (!localUser) {
        // Criar usu√°rio no banco local
        console.log(`üë§ Criando usu√°rio local para Firebase UID: ${firebaseUser.uid}`);
        localUser = await databaseService.createUser(
          null, // whatsapp_number ser√° null inicialmente
          firebaseUser.name,
          firebaseUser.uid,
          firebaseUser.email
        );
        
        logger.info('Usu√°rio criado via Firebase Auth', {
          firebaseUid: firebaseUser.uid,
          localUserId: localUser.id,
          email: firebaseUser.email
        });
      } else {
        // Atualizar informa√ß√µes se necess√°rio
        if (localUser.name !== firebaseUser.name || localUser.email !== firebaseUser.email) {
          // Aqui voc√™ pode implementar atualiza√ß√£o do usu√°rio se necess√°rio
          logger.info('Usu√°rio existente autenticado', {
            firebaseUid: firebaseUser.uid,
            localUserId: localUser.id
          });
        }
      }

      return {
        success: true,
        user: {
          id: localUser.id,
          firebaseUid: firebaseUser.uid,
          email: firebaseUser.email,
          name: firebaseUser.name,
          whatsappNumber: localUser.whatsapp_number,
          emailVerified: firebaseUser.emailVerified
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o:', error);
      logger.error('Erro na autentica√ß√£o', {
        error: error.message
      });
      
      return {
        success: false,
        error: 'Erro interno de autentica√ß√£o',
        code: 'AUTH_ERROR'
      };
    }
  }

  // Vincular n√∫mero do WhatsApp ao usu√°rio autenticado
  async linkWhatsAppNumber(firebaseUid, whatsappNumber) {
    try {
      // Buscar usu√°rio pelo Firebase UID
      const user = await databaseService.getUserByFirebaseUid(firebaseUid);
      
      if (!user) {
        return {
          success: false,
          error: 'Usu√°rio n√£o encontrado',
          code: 'USER_NOT_FOUND'
        };
      }

      // Verificar se o n√∫mero j√° est√° vinculado a outro usu√°rio
      const existingUser = await databaseService.getUserByWhatsApp(whatsappNumber);
      
      if (existingUser && existingUser.firebase_uid !== firebaseUid) {
        return {
          success: false,
          error: 'N√∫mero do WhatsApp j√° vinculado a outro usu√°rio',
          code: 'WHATSAPP_ALREADY_LINKED'
        };
      }

      // Atualizar n√∫mero do WhatsApp
      if (databaseService.connectionType === 'supabase') {
        const { data, error } = await databaseService.supabase
          .from('users')
          .update({ whatsapp_number: whatsappNumber })
          .eq('firebase_uid', firebaseUid)
          .select()
          .single();
        
        if (error) throw error;
        
        logger.info('N√∫mero WhatsApp vinculado', {
          firebaseUid,
          whatsappNumber,
          userId: user.id
        });
        
        return {
          success: true,
          user: data
        };
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao vincular WhatsApp:', error);
      logger.error('Erro ao vincular WhatsApp', {
        firebaseUid,
        whatsappNumber,
        error: error.message
      });
      
      return {
        success: false,
        error: 'Erro ao vincular n√∫mero do WhatsApp',
        code: 'LINK_ERROR'
      };
    }
  }

  // Obter usu√°rio por Firebase UID
  async getUserByFirebaseUid(firebaseUid) {
    try {
      const user = await databaseService.getUserByFirebaseUid(firebaseUid);
      
      if (!user) {
        return {
          success: false,
          error: 'Usu√°rio n√£o encontrado',
          code: 'USER_NOT_FOUND'
        };
      }

      return {
        success: true,
        user: {
          id: user.id,
          firebaseUid: user.firebase_uid,
          email: user.email,
          name: user.name,
          whatsappNumber: user.whatsapp_number,
          createdAt: user.created_at,
          isActive: user.is_active
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      return {
        success: false,
        error: 'Erro ao buscar usu√°rio',
        code: 'FETCH_ERROR'
      };
    }
  }

  // Middleware de autentica√ß√£o para rotas
  requireAuth() {
    return this.firebaseService.authMiddleware();
  }

  // Middleware de autentica√ß√£o opcional
  optionalAuth() {
    return this.firebaseService.optionalAuthMiddleware();
  }

  // Obter configura√ß√£o do Firebase para o frontend
  getFirebaseConfig() {
    return this.firebaseService.getClientConfig();
  }

  // Verificar se usu√°rio tem WhatsApp vinculado
  async hasWhatsAppLinked(firebaseUid) {
    try {
      const user = await databaseService.getUserByFirebaseUid(firebaseUid);
      return {
        success: true,
        hasWhatsApp: !!(user && user.whatsapp_number),
        whatsappNumber: user?.whatsapp_number || null
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
}

const authService = new AuthService();

module.exports = authService;
module.exports.AuthService = AuthService;