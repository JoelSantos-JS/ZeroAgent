// Corre√ß√£o para o problema do evento 'ready' no WhatsApp Web.js
// Este arquivo cont√©m v√°rias estrat√©gias para resolver o problema

const { Client, LocalAuth } = require('whatsapp-web.js');
const path = require('path');

class WhatsAppFix {
  constructor() {
    this.client = null;
    this.isReady = false;
    this.connectionStatus = 'disconnected';
    this.readyTimeout = null;
    this.retryCount = 0;
    this.maxRetries = 3;
  }

  // Configura√ß√£o otimizada baseada em issues conhecidos
  getOptimizedConfig() {
    return {
      authStrategy: new LocalAuth({
        clientId: 'vox-agent-fixed',
        dataPath: path.join(process.cwd(), '.wwebjs_auth_fixed')
      }),
      puppeteer: {
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--single-process',
          '--disable-gpu',
          // Corre√ß√µes espec√≠ficas para o problema do 'ready'
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-ipc-flooding-protection',
          '--disable-hang-monitor',
          '--disable-client-side-phishing-detection',
          '--disable-component-update',
          '--disable-default-apps',
          '--disable-domain-reliability',
          '--disable-extensions',
          '--disable-features=TranslateUI',
          '--disable-sync',
          '--hide-scrollbars',
          '--mute-audio',
          '--no-default-browser-check',
          '--no-pings',
          '--window-size=1366,768'
        ],
        // Configura√ß√µes adicionais
        defaultViewport: null,
        devtools: false,
        timeout: 60000,
        protocolTimeout: 60000,
        slowMo: 0
      },
      // Configura√ß√µes espec√≠ficas do WhatsApp Web.js
      webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
      },
      // Timeout personalizado
      takeoverOnConflict: true,
      takeoverTimeoutMs: 60000
    };
  }

  async initialize() {
    try {
      console.log('üîß Inicializando WhatsApp com corre√ß√µes...');
      
      this.client = new Client(this.getOptimizedConfig());
      this.setupEventHandlers();
      
      await this.client.initialize();
      
    } catch (error) {
      console.error('‚ùå Erro na inicializa√ß√£o:', error);
      
      if (this.retryCount < this.maxRetries) {
        this.retryCount++;
        console.log(`üîÑ Tentativa ${this.retryCount}/${this.maxRetries} em 5 segundos...`);
        
        setTimeout(() => {
          this.initialize();
        }, 5000);
      } else {
        console.error('‚ùå M√°ximo de tentativas atingido');
        throw error;
      }
    }
  }

  setupEventHandlers() {
    if (!this.client) return;

    this.client.on('qr', (qr) => {
      console.log('üì± QR Code gerado (vers√£o corrigida)');
      // Aqui voc√™ pode integrar com sua l√≥gica de QR code
    });

    this.client.on('authenticated', () => {
      console.log('üîê Cliente autenticado');
      this.connectionStatus = 'authenticated';
      
      // Implementar timeout mais longo e com retry
      this.readyTimeout = setTimeout(() => {
        console.log('‚ö†Ô∏è Timeout do evento ready - Aplicando corre√ß√£o...');
        this.handleReadyTimeout();
      }, 60000); // 60 segundos em vez de 30
    });

    this.client.on('ready', () => {
      console.log('‚úÖ Cliente pronto! (Corre√ß√£o aplicada com sucesso)');
      
      if (this.readyTimeout) {
        clearTimeout(this.readyTimeout);
        this.readyTimeout = null;
      }
      
      this.isReady = true;
      this.connectionStatus = 'ready';
      this.retryCount = 0; // Reset contador
      
      try {
        const info = this.client.info;
        console.log(`üì± Conectado como: ${info.pushname} (${info.wid.user})`);
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao obter info, mas conex√£o OK');
      }
    });

    this.client.on('auth_failure', (msg) => {
      console.error('‚ùå Falha na autentica√ß√£o:', msg);
      this.connectionStatus = 'auth_failure';
    });

    this.client.on('disconnected', (reason) => {
      console.log('üîå Desconectado:', reason);
      this.isReady = false;
      this.connectionStatus = 'disconnected';
      
      if (this.readyTimeout) {
        clearTimeout(this.readyTimeout);
        this.readyTimeout = null;
      }
    });

    // Capturar erros espec√≠ficos
    this.client.on('error', (error) => {
      console.error('‚ùå Erro do cliente:', error.message);
    });
  }

  // M√©todo para lidar com timeout do evento ready
  async handleReadyTimeout() {
    console.log('üîß Aplicando corre√ß√£o para timeout do ready...');
    
    try {
      // Estrat√©gia 1: For√ßar refresh da p√°gina
      if (this.client.pupPage) {
        console.log('üîÑ Tentando refresh da p√°gina...');
        await this.client.pupPage.reload({ waitUntil: 'networkidle0' });
        
        // Aguardar mais 30 segundos ap√≥s reload
        setTimeout(() => {
          if (!this.isReady) {
            console.log('üîß Refresh n√£o funcionou, tentando reinicializa√ß√£o...');
            this.forceReconnect();
          }
        }, 30000);
      } else {
        this.forceReconnect();
      }
    } catch (error) {
      console.error('‚ùå Erro na corre√ß√£o:', error);
      this.forceReconnect();
    }
  }

  // For√ßar reconex√£o
  async forceReconnect() {
    console.log('üîÑ For√ßando reconex√£o...');
    
    try {
      if (this.client) {
        await this.client.destroy();
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao destruir cliente:', error.message);
    }
    
    // Aguardar e reinicializar
    setTimeout(() => {
      if (this.retryCount < this.maxRetries) {
        this.initialize();
      } else {
        console.error('‚ùå M√°ximo de reconex√µes atingido');
      }
    }, 3000);
  }

  getStatus() {
    return {
      isReady: this.isReady,
      connectionStatus: this.connectionStatus,
      retryCount: this.retryCount
    };
  }

  async disconnect() {
    if (this.readyTimeout) {
      clearTimeout(this.readyTimeout);
      this.readyTimeout = null;
    }
    
    if (this.client) {
      await this.client.destroy();
    }
    
    this.isReady = false;
    this.connectionStatus = 'disconnected';
  }
}

module.exports = WhatsAppFix;

// Exemplo de uso:
// const WhatsAppFix = require('./whatsapp-fix');
// const whatsappFix = new WhatsAppFix();
// whatsappFix.initialize();